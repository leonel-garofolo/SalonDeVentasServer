/*
 * Created on 4 oct 2016 ( Time 09:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.salondeventas.server.test.persistence;


import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.salondeventas.server.modelo.jpa.PrecioproductoEntity;
import org.salondeventas.server.modelo.jpa.ProductoEntity;
import org.salondeventas.server.modelo.jpa.VproductosEntity;
import org.salondeventas.server.persistence.PersistenceServiceProvider;
import org.salondeventas.server.persistence.services.PrecioproductoPersistence;
import org.salondeventas.server.persistence.services.ProductoPersistence;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * JUnit test case for Producto persistence service
 * 
 * @author Telosys Tools Generator
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
//ApplicationContext will be loaded from the static inner ContextConfiguration class
@ContextConfiguration(locations = {"file:src/main/webapp/META-INF/spring/applicationContext.xml"})

public class ProductoPersistenceTest 
{
	@Test
	public void test1() {
		
		System.out.println("Test count ..." );
		
		ProductoPersistence service = PersistenceServiceProvider.getService(ProductoPersistence.class);
		System.out.println("CountAll = " + service.countAll() );
	}
	
	@Test
	public void addProducto() {
		
		System.out.println("Test count ..." );
		
		ProductoPersistence service = PersistenceServiceProvider.getService(ProductoPersistence.class);
		final ProductoEntity prod1 = new ProductoEntity();
		prod1.setNombre("Producto 2");
		prod1.setDetalle("producto de prueba");
		System.out.println("id: " + prod1.getIdproducto());
		service.insert(prod1);
		System.out.println("id: " + prod1.getIdproducto());
		PrecioproductoPersistence servicePrecio = PersistenceServiceProvider.getService(PrecioproductoPersistence.class);
		final PrecioproductoEntity precio = new PrecioproductoEntity();	
		precio.setIdproducto(prod1.getIdproducto());
		precio.setFecha(new Date());
		precio.setImporte(new BigDecimal("13.5"));		
		servicePrecio.insert(precio);
		
	}
	
	@Test
	public void test2() {
		
		System.out.println("Test Producto persistence : delete + load ..." );
		
		ProductoPersistence service = PersistenceServiceProvider.getService(ProductoPersistence.class);
		
		// TODO : set primary key values here 
		process( service, 0  );
		// process( service, mock, ... );
	}
			
	@Test
	public void testLoadVista() {
		
		System.out.println("Test Producto persistence : delete + load ..." );
		
		ProductoPersistence service = PersistenceServiceProvider.getService(ProductoPersistence.class);
		
		// TODO : set primary key values here 
		List<VproductosEntity> productos =service.loadAllVista();
		for(VproductosEntity entity: productos){
			System.out.println("   FOUND : " + entity );
		}
		// process( service, mock, ... );
	}
	
	
	@Test
	public void testLoadVistaIndex() {
		
		System.out.println("Test Producto persistence : delete + load ..." );
		
		ProductoPersistence service = PersistenceServiceProvider.getService(ProductoPersistence.class);
		
		// TODO : set primary key values here 
		List<VproductosEntity> productos =service.loadAllVista();
		for(VproductosEntity entity: productos){
			System.out.println("   FOUND : " + entity );
		}
		// process( service, mock, ... );
	}

	private void process(ProductoPersistence service, Integer idproducto ) {
		System.out.println("----- "  );
		System.out.println(" . load : " );
		ProductoEntity entity = service.load( idproducto );
		if ( entity != null ) {
			// Found 
			System.out.println("   FOUND : " + entity );
			
			// Save (update) with the same values to avoid database integrity errors  
			System.out.println(" . save : " + entity );
			service.save(entity);
			System.out.println("   saved : " + entity );
		}
	}
}
