/*
 * Created on 22 nov 2016 ( Time 09:10:22 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a composite Primary Key  


package org.salondeventas.server.modelo.jpa;

import java.io.Serializable;
import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "producto_ingreso"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="producto_ingreso", catalog="salon_de_ventas" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="ProductoIngresoEntity.countAll", query="SELECT COUNT(x) FROM ProductoIngresoEntity x" )
} )
public class ProductoIngresoEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private ProductoIngresoEntityKey compositePrimaryKey ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="fechaIngreso", nullable=false)
		@NotNull
		    private Date       fechaingreso ;

    @Column(name="cantidad", nullable=false)
		@NotNull
		    private Integer    cantidad     ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="idProducto", referencedColumnName="idProducto", insertable=false, updatable=false)
    private ProductoEntity producto    ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ProductoIngresoEntity() {
		super();
		this.compositePrimaryKey = new ProductoIngresoEntityKey();       
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
    public void setIdproductoIngreso( Integer idproductoIngreso ) {
        this.compositePrimaryKey.setIdproductoIngreso( idproductoIngreso ) ;
    }
    public Integer getIdproductoIngreso() {
        return this.compositePrimaryKey.getIdproductoIngreso() ;
    }
    public void setIdproducto( Integer idproducto ) {
        this.compositePrimaryKey.setIdproducto( idproducto ) ;
    }
    public Integer getIdproducto() {
        return this.compositePrimaryKey.getIdproducto() ;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : fechaIngreso ( DATETIME ) 
    public void setFechaingreso( Date fechaingreso ) {
        this.fechaingreso = fechaingreso;
    }
    public Date getFechaingreso() {
        return this.fechaingreso;
    }

    //--- DATABASE MAPPING : cantidad ( INT ) 
    public void setCantidad( Integer cantidad ) {
        this.cantidad = cantidad;
    }
    public Integer getCantidad() {
        return this.cantidad;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setProducto( ProductoEntity producto ) {
        this.producto = producto;
    }
    public ProductoEntity getProducto() {
        return this.producto;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        if ( compositePrimaryKey != null ) {  
            sb.append(compositePrimaryKey.toString());  
        }  
        else {  
            sb.append( "(null-key)" ); 
        }  
        sb.append("]:"); 
        sb.append(fechaingreso);
        sb.append("|");
        sb.append(cantidad);
        return sb.toString(); 
    } 

}
