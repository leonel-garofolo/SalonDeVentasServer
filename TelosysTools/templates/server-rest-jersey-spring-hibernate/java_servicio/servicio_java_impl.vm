#set($uncapitalizedEntityName = $fn.uncapitalize(${entity.name}) )
## ----------------------------------------------------------------------
#if ( $entity.hasCompositePrimaryKey() )
#set( $primaryKeyType = "${entity.name}EntityKey" )
#else 
#set( $primaryKeyType = $entity.keyAttributes[0].wrapperType )
#end
## ----------------------------------------------------------------------

package ${target.javaPackageFromFolder($SRC)};

import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import ${ROOT_PKG}.services.persistence.${entity.name}Persistence;
import ${ROOT_PKG}.modelo.jpa.${entity.name}Entity;
import ${ROOT_PKG}.services.${entity.name}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service("${uncapitalizedEntityName}Service")
public class ${entity.name}ServiceImpl implements ${entity.name}Service {
	
	@Autowired
	private ${entity.name}Persistence ${uncapitalizedEntityName}Persistence;

	public boolean insert(${entity.name}Entity obj) {
		if(obj!= null){
			try {
				${uncapitalizedEntityName}Persistence.insert(obj);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
		}
		return true;
	}

	public boolean update(${entity.name}Entity obj) {
		if(obj!= null){
			try {
				${uncapitalizedEntityName}Persistence.save(obj);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
		}		
		return true;		
	}
	
	public boolean delete(${entity.name}Entity obj) {
		if(obj!= null){
			try {
				${uncapitalizedEntityName}Persistence.delete(obj);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
		}			
		return true;
	}	

	public ${entity.name}Entity load($fn.argumentsListWithType( $entity.keyAttributes )) {
		try{
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
			return ${uncapitalizedEntityName}Persistence.load(key);
#else
			return ${uncapitalizedEntityName}Persistence.load( $fn.argumentsList( $entity.keyAttributes ) );
#end	
		}catch (Exception e) {
			e.printStackTrace();
			return null;
		}		
	}
	
	public List<${entity.name}Entity> loadAll() {		
		try {
			return ${uncapitalizedEntityName}Persistence.loadAll();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}
