#set($uncapitalizedEntityName = $fn.uncapitalize(${entity.name}) )
#set($toLowerCaseEntityName = $fn.toLowerCase(${entity.name}) )
## ----------------------------------------------------------------------
#if ( $entity.hasCompositePrimaryKey() )
#set( $primaryKeyType = "${entity.name}EntityKey" )
#else 
#set( $primaryKeyType = $entity.keyAttributes[0].wrapperType )
#end
## ----------------------------------------------------------------------
##--------------------------------------------------------------------------------------------------------
#set( $keyValues   = $fn.buildValues($entity.keyAttributes,     1) )
#set( $dataValues  = $fn.buildValues($entity.nonKeyAttributes , 1) )
#set( $dataValues2 = $fn.buildValues($entity.nonKeyAttributes , 2) )
#set( $keyValues3  = $fn.buildValues($entity.keyAttributes,     3) )
##--------------------------------------------------------------------------------------------------------

package ${target.javaPackageFromFolder($TEST_SRC)};

import static org.junit.Assert.assertEquals;

import java.math.BigDecimal;
import java.util.Date;

import javax.ws.rs.client.Entity;
import javax.ws.rs.core.Application;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.test.JerseyTest;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.salondeventas.server.modelo.jpa.${entity}Entity;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:META-INF/spring/applicationContext.xml"})
@WebAppConfiguration
public class ${entity}ControllerImplTest extends JerseyTest {
	
	private ${entity}ControllerImpl ${uncapitalizedEntityName}Controlador;
			
	@Override
	protected Application configure() {
		${uncapitalizedEntityName}Controlador = Mockito.mock(${entity}ControllerImpl.class);
		ResourceConfig app = new ResourceConfig(${entity}ControllerImpl.class);
		return app;
	}	

    @After
    public void after() throws Exception {
        super.tearDown();
    }
    
	@Test
	public void crud${entity}() {
		String pathToCall = "${toLowerCaseEntityName}/insert/";

		//INSERT
		final ${entity}Entity ${uncapitalizedEntityName} = new ${entity}Entity();
#if ( $entity.hasAutoIncrementedKey() )
		// Auto-incremented key : nothing to set in the Primary Key
#else
#foreach( $attribute in $entity.keyAttributes )
		${uncapitalizedEntityName}.${attribute.setter}($keyValues.javaValue($attribute.name)); // "$attribute.databaseName" : $attribute.fullType
#end
#end
		//--- Other values
#foreach( $attribute in $entity.nonKeyAttributes )
		${uncapitalizedEntityName}.${attribute.setter}($dataValues.javaValue($attribute.name)); // "$attribute.databaseName" : $attribute.fullType
#end
		
		final Entity<${entity}Entity> ${uncapitalizedEntityName}Entity = Entity.entity(${uncapitalizedEntityName}, MediaType.APPLICATION_JSON_TYPE);				
		final Response responseWrapperInsert = target(pathToCall)				
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.request(MediaType.APPLICATION_JSON_TYPE).post(${uncapitalizedEntityName}Entity);				
		assertEquals(Response.Status.OK.getStatusCode(), responseWrapperInsert.getStatus());
		
    	//--- FIND
    	System.out.println("Find..." );
		pathToCall = "${toLowerCaseEntityName}/load/";
		final ${entity}Entity ${uncapitalizedEntityName}2 = new ${entity}Entity();
#foreach( $field in $entity.keyAttributes )
		${uncapitalizedEntityName}2.${field.setter}(${uncapitalizedEntityName}.${field.getter}());	
#end  		
		final Entity<${entity}Entity> ${uncapitalizedEntityName}Entity2 = Entity.entity(${uncapitalizedEntityName}2, MediaType.APPLICATION_JSON_TYPE);				
		final Response responseWrapperLoad = target(pathToCall)				
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")				
				.request(MediaType.APPLICATION_JSON_TYPE).post(${uncapitalizedEntityName}Entity2);				
		assertEquals(Response.Status.OK.getStatusCode(), responseWrapperLoad.getStatus());		
		${entity}Entity ${uncapitalizedEntityName}3 = responseWrapperLoad.readEntity(${entity}Entity.class);		

		//--- UPDATE
		pathToCall = "${toLowerCaseEntityName}/update/";		
#if ( $entity.nonKeyAttributesCount > 0 )    	
		//--- Change values
#foreach( $attribute in $entity.nonKeyAttributes )
		${uncapitalizedEntityName}3.${attribute.setter}($dataValues2.javaValue($attribute.name)); // "$attribute.databaseName" : $attribute.fullType
#end    	
#else
    	//--- NO UPDATE FOR THIS ENTITY (ALL COLUMNS IN PRIMARY KEY)
#end
				
		final Entity<${entity}Entity> ${uncapitalizedEntityName}Entity3 = Entity.entity(${uncapitalizedEntityName}3, MediaType.APPLICATION_JSON_TYPE);										
		final Response responseWrapperUpdate = target(pathToCall)				
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.request(MediaType.APPLICATION_JSON_TYPE).post(${uncapitalizedEntityName}Entity3);				
		assertEquals(Response.Status.OK.getStatusCode(), responseWrapperUpdate.getStatus());

		//--- DELETE
		pathToCall = "${toLowerCaseEntityName}/delete/";						
		final Entity<${entity}Entity> ${uncapitalizedEntityName}Entity4 = Entity.entity(${uncapitalizedEntityName}3, MediaType.APPLICATION_JSON_TYPE);										
		final Response responseWrapperDelete = target(pathToCall)				
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.request(MediaType.APPLICATION_JSON_TYPE).post(${uncapitalizedEntityName}Entity4);				
		assertEquals(Response.Status.OK.getStatusCode(), responseWrapperDelete.getStatus());	

		//--- LOAD ALL
		pathToCall = "${toLowerCaseEntityName}/loadall/";		
		final Entity<${entity}Entity> ${uncapitalizedEntityName}Entity5 = Entity.entity(new ${entity}Entity(), MediaType.APPLICATION_JSON_TYPE);												
		final Response responseWrapperLoadAll = target(pathToCall)				
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.request(MediaType.APPLICATION_JSON_TYPE).post(${uncapitalizedEntityName}Entity5);		
		assertEquals(Response.Status.OK.getStatusCode(), responseWrapperLoadAll.getStatus());
		System.out.println(responseWrapperLoadAll.readEntity(String.class));			
	}			
}